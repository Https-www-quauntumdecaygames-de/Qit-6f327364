# vim: set filetype=expect:
#
# Interactive tests for `set` builtin
set pid [spawn $ksh]
expect_prompt
# Terminal rows and columns may default to zero so ensure sane values.
send "stty rows 24 cols 80\r"
expect_prompt

send "set -o emacs\r"
expect_prompt

# ==========
# TODO
# https://github.com/att/ast/issues/911
# -b The shell writes a message to standard error as soon it
#    detects that a background job completes rather than waiting
#    until the next prompt.

# ==========
# -v Verbose. The shell displays its input onto standard error as
#    it reads it.
log_test_entry
send "set -v\r"
expect_prompt
send "echo hello\r"
expect -re "echo hello\r\necho hello\r\nhello\r\n"
expect_prompt

# ==========
# -H Enable !-style history expansion similar to csh.
log_test_entry
send "set -H\r"
expect_prompt
send "echo hello\r"
expect -re ".*hello\r\n"
expect_prompt

send "!-1\r"
expect -re ".*hello\r\n"
expect_prompt

# ==========
# TODO
# https://github.com/att/ast/issues/912
# -G Causes ** by itself to also match all sub-directories during
#    pathname expansion.


# ==========
# -f Pathname expansion is disabled.
log_test_entry
send "set +f\r"
expect_prompt
send "fals"
send "\t"
redraw_prompt
expect -re ".*false(.exe)? "
sleep 0.1
send [ctrl C]
expect_prompt

# ==========
# -f Pathname expansion is enabled.
log_test_entry
send "set -f\r"
expect_prompt
send "fals"
send "\t"
redraw_prompt
expect -re ".*fals    "
sleep 0.1
send [ctrl C]
expect_prompt

# ==========
# TODO
# -m When enabled, the shell runs background jobs in a separate
#    process group and displays a line upon completion. This mode
#    is enabled by default for interactive shells on systems that
#    support job control.

# ==========
# TODO
# markdirs
# A trailing / is appended to directories resulting
# from pathname expansion.

# ==========
# set -o ignoreeof
# Prevents an interactive shell from exiting on reading
# an end-of-file.
log_test_entry
send "set -o ignoreeof\r"
expect_prompt
send [ctrl D]
expect -re "Use 'exit' to terminate this shell"
expect_prompt

# ==========
# Exit the shell.
log_test_entry
send "set +o ignoreeof\r"
expect_prompt
send "exit\r"
catch {expect default exp_continue} output
log_debug "EOF output: $output"
wait
